#!/usr/bin/env python
# Copyright (C) 2007, Thomas Leonard
# See the README file for details, or visit http://0install.net.

from optparse import OptionParser
import os, sys
from zeroinstall import SafeException
from zeroinstall.injector import reader, model

version = '0.1-pre'

parser = OptionParser(usage = """usage: %prog [options] LOCAL-FEED

Run this command from a new empty directory to set things up.""")

parser.add_option("-k", "--key", help="GPG key to use for signing", action='store', metavar='KEYID')
parser.add_option("-v", "--verbose", help="more verbose output", action='count')
parser.add_option("-r", "--release", help="make a new release", action='store_true')
parser.add_option("", "--archive-dir-public-url", help="remote directory for releases", metavar='URL')
parser.add_option("", "--master-feed-file", help="local file to extend with new releases", metavar='PATH')
parser.add_option("", "--archive-upload-command", help="shell command to upload releases", metavar='COMMAND')
parser.add_option("", "--master-feed-upload-command", help="shell command to upload feed", metavar='COMMAND')
parser.add_option("-V", "--version", help="display version information", action='store_true')

(options, args) = parser.parse_args()

if options.version:
	print "0release (zero-install) " + version
	print "Copyright (C) 2007 Thomas Leonard"
	print "This program comes with ABSOLUTELY NO WARRANTY,"
	print "to the extent permitted by law."
	print "You may redistribute copies of this program"
	print "under the terms of the GNU General Public License."
	print "For more information about these matters, see the file named COPYING."
	sys.exit(0)

if options.verbose:
	import logging
	logger = logging.getLogger()
	if options.verbose == 1:
		logger.setLevel(logging.INFO)
	else:
		logger.setLevel(logging.DEBUG)

if len(args) != 1:
	parser.print_help()
	sys.exit(1)

local_feed_path = args[0]

try:
	if not os.path.exists(local_feed_path):
		raise SafeException("Local feed file '%s' does not exist" % local_feed_path)

	iface = model.Interface(model.canonical_iface_uri(local_feed_path))
	reader.update(iface, local_feed_path, local = True)

	if options.release:
		import release
		release.do_release(iface, options)
	else:
		import setup
		setup.init_releases_directory(iface)
except KeyboardInterrupt, ex:
	print >>sys.stderr, "Interrupted"
	sys.exit(1)
except OSError, ex:
	if options.verbose: raise
	print >>sys.stderr, str(ex)
	sys.exit(1)
except IOError, ex:
	if options.verbose: raise
	print >>sys.stderr, str(ex)
	sys.exit(1)
except SafeException, ex:
	if options.verbose: raise
	print >>sys.stderr, str(ex)
	sys.exit(1)
