#!/usr/bin/env python
# Copyright (C) 2009, Thomas Leonard
# See the README file for details, or visit http://0install.net.

#import coverage
#coverage.process_startup()

from optparse import OptionParser, SUPPRESS_HELP
import os, sys

zi = os.environ.get("ZI_RELEASE_ZEROINSTALL", None)
if zi is not None:
	# NOT the first element... that's us!
	# (and we want our setup.py, not 0install's)
	sys.path.insert(1, zi)
from zeroinstall import SafeException
from zeroinstall.injector import qdom

version = '0.16'

parser = OptionParser(usage = """usage: %prog [options] LOCAL-FEED

Run this command from a new empty directory to set things up.""")

parser.add_option("", "--builders", help="comma-separated list of builders for binaries", metavar='LIST')
parser.add_option("", "--build-slave", help="compile a binary a source release candidate", action='store_true')
parser.add_option("-k", "--key", help="GPG key to use for signing", action='store', metavar='KEYID')
parser.add_option("-v", "--verbose", help="more verbose output", action='count')
parser.add_option("-r", "--release", help="make a new release", action='store_true')
parser.add_option("", "--archive-dir-public-url", help=SUPPRESS_HELP, metavar='URL')
parser.add_option("", "--master-feed-file", help=SUPPRESS_HELP, metavar='PATH')
parser.add_option("", "--archive-upload-command", help=SUPPRESS_HELP, metavar='COMMAND')
parser.add_option("", "--master-feed-upload-command", help=SUPPRESS_HELP, metavar='COMMAND')
parser.add_option("", "--public-scm-repository", help="the name of the repository to push to", metavar='REPOS')
parser.add_option("", "--release-version", help="explicitly set the version of this release", metavar='VERSION')
parser.add_option("-V", "--version", help="display version information", action='store_true')

(options, args) = parser.parse_args()

if options.version:
	print "0release (zero-install) " + version
	print "Copyright (C) 2009 Thomas Leonard"
	print "This program comes with ABSOLUTELY NO WARRANTY,"
	print "to the extent permitted by law."
	print "You may redistribute copies of this program"
	print "under the terms of the GNU General Public License."
	print "For more information about these matters, see the file named COPYING."
	sys.exit(0)

if options.verbose:
	import logging
	logger = logging.getLogger()
	if options.verbose == 1:
		logger.setLevel(logging.INFO)
	else:
		logger.setLevel(logging.DEBUG)

if options.build_slave:
	if len(args) != 4:
		parser.print_help()
		sys.exit(1)
	src_feed, archive_file, archive_dir_public_url, target_feed = args
	import compile
	compile.build_slave(src_feed, archive_file, archive_dir_public_url, target_feed)
	sys.exit(0)

if len(args) != 1:
	parser.print_help()
	sys.exit(1)

local_feed_path = os.path.abspath(args[0])

try:
	if not os.path.exists(local_feed_path):
		raise SafeException("Local feed file '%s' does not exist" % local_feed_path)

	with open(local_feed_path, 'rb') as stream:
		root = qdom.parse(stream)

	import support
	feed = support.load_feed(local_feed_path)

	if options.release:
		import release
		release.do_release(feed, options)
	else:
		import setup
		setup.init_releases_directory(feed)
except KeyboardInterrupt, ex:
	print >>sys.stderr, "Interrupted"
	sys.exit(1)
except OSError, ex:
	if options.verbose: raise
	print >>sys.stderr, str(ex)
	sys.exit(1)
except IOError, ex:
	if options.verbose: raise
	print >>sys.stderr, str(ex)
	sys.exit(1)
except SafeException, ex:
	if options.verbose: raise
	print >>sys.stderr, str(ex)
	sys.exit(1)
